/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  GenderEnum: "female" | "male"
  UserType: "INDIVIDUAL" | "SHELTER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Pet: { // root type
    adopted?: boolean | null; // Boolean
    age: number; // Int!
    breed?: string | null; // String
    gender: NexusGenEnums['GenderEnum']; // GenderEnum!
    id?: string | null; // ID
    location: string; // String!
    name: string; // String!
    neutered?: boolean | null; // Boolean
    photo: string; // String!
    shelterId: number; // Int!
    type: string; // String!
    vaccinated?: boolean | null; // Boolean
  }
  Query: {};
  Shelter: { // root type
    id?: number | null; // Int
    name: string; // String!
    pets?: Array<NexusGenRootTypes['Pet'] | null> | null; // [Pet]
  }
  User: { // root type
    email: string; // String!
    id: string; // ID!
    location: string; // String!
    name: string; // String!
    type: NexusGenEnums['UserType']; // UserType!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    createPet: NexusGenRootTypes['Pet']; // Pet!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Pet: { // field return type
    adopted: boolean | null; // Boolean
    age: number; // Int!
    breed: string | null; // String
    gender: NexusGenEnums['GenderEnum']; // GenderEnum!
    id: string | null; // ID
    location: string; // String!
    name: string; // String!
    neutered: boolean | null; // Boolean
    photo: string; // String!
    shelter: NexusGenRootTypes['Shelter'] | null; // Shelter
    shelterId: number; // Int!
    type: string; // String!
    vaccinated: boolean | null; // Boolean
  }
  Query: { // field return type
    allPets: NexusGenRootTypes['Pet'][]; // [Pet!]!
  }
  Shelter: { // field return type
    id: number | null; // Int
    name: string; // String!
    pets: Array<NexusGenRootTypes['Pet'] | null> | null; // [Pet]
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    location: string; // String!
    name: string; // String!
    type: NexusGenEnums['UserType']; // UserType!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    createPet: 'Pet'
    login: 'AuthPayload'
    signup: 'AuthPayload'
  }
  Pet: { // field return type name
    adopted: 'Boolean'
    age: 'Int'
    breed: 'String'
    gender: 'GenderEnum'
    id: 'ID'
    location: 'String'
    name: 'String'
    neutered: 'Boolean'
    photo: 'String'
    shelter: 'Shelter'
    shelterId: 'Int'
    type: 'String'
    vaccinated: 'Boolean'
  }
  Query: { // field return type name
    allPets: 'Pet'
  }
  Shelter: { // field return type name
    id: 'Int'
    name: 'String'
    pets: 'Pet'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    location: 'String'
    name: 'String'
    type: 'UserType'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPet: { // args
      adopted?: boolean | null; // Boolean
      age: number; // Int!
      breed?: string | null; // String
      gender: NexusGenEnums['GenderEnum']; // GenderEnum!
      location: string; // String!
      name: string; // String!
      neutered?: boolean | null; // Boolean
      photo: string; // String!
      shelter: string; // String!
      type: string; // String!
      vaccinated?: boolean | null; // Boolean
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      location: string; // String!
      name: string; // String!
      password: string; // String!
      type: NexusGenEnums['UserType']; // UserType!
    }
  }
  Query: {
    allPets: { // args
      location?: string | null; // String
      type?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}